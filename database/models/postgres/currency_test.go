// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCurrencies(t *testing.T) {
	t.Parallel()

	query := Currencies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCurrenciesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrenciesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Currencies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrenciesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CurrencySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrenciesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CurrencyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Currency exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CurrencyExists to return true, but got false.")
	}
}

func testCurrenciesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	currencyFound, err := FindCurrency(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if currencyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCurrenciesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Currencies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCurrenciesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Currencies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCurrenciesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyOne := &Currency{}
	currencyTwo := &Currency{}
	if err = randomize.Struct(seed, currencyOne, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyTwo, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = currencyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = currencyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Currencies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCurrenciesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	currencyOne := &Currency{}
	currencyTwo := &Currency{}
	if err = randomize.Struct(seed, currencyOne, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyTwo, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = currencyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = currencyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func currencyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Currency) error {
	*o = Currency{}
	return nil
}

func testCurrenciesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Currency{}
	o := &Currency{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, currencyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Currency object: %s", err)
	}

	AddCurrencyHook(boil.BeforeInsertHook, currencyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	currencyBeforeInsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterInsertHook, currencyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	currencyAfterInsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterSelectHook, currencyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	currencyAfterSelectHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeUpdateHook, currencyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	currencyBeforeUpdateHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterUpdateHook, currencyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	currencyAfterUpdateHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeDeleteHook, currencyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	currencyBeforeDeleteHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterDeleteHook, currencyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	currencyAfterDeleteHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeUpsertHook, currencyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	currencyBeforeUpsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterUpsertHook, currencyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	currencyAfterUpsertHooks = []CurrencyHook{}
}

func testCurrenciesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrenciesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(currencyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrenciesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCurrenciesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CurrencySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCurrenciesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Currencies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	currencyDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `ShortName`: `character varying`}
	_               = bytes.MinRead
)

func testCurrenciesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(currencyAllColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCurrenciesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(currencyAllColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Currency{}
	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, currencyDBTypes, true, currencyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(currencyAllColumns, currencyPrimaryKeyColumns) {
		fields = currencyAllColumns
	} else {
		fields = strmangle.SetComplement(
			currencyAllColumns,
			currencyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CurrencySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCurrenciesUpsert(t *testing.T) {
	t.Parallel()

	if len(currencyAllColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Currency{}
	if err = randomize.Struct(seed, &o, currencyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Currency: %s", err)
	}

	count, err := Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, currencyDBTypes, false, currencyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Currency: %s", err)
	}

	count, err = Currencies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
