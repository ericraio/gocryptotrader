// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGCTTests(t *testing.T) {
	t.Parallel()

	query := GCTTests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGCTTestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGCTTestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GCTTests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGCTTestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GCTTestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGCTTestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GCTTestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GCTTest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GCTTestExists to return true, but got false.")
	}
}

func testGCTTestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gctTestFound, err := FindGCTTest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gctTestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGCTTestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GCTTests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGCTTestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GCTTests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGCTTestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctTestOne := &GCTTest{}
	gctTestTwo := &GCTTest{}
	if err = randomize.Struct(seed, gctTestOne, gctTestDBTypes, false, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}
	if err = randomize.Struct(seed, gctTestTwo, gctTestDBTypes, false, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gctTestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gctTestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GCTTests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGCTTestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gctTestOne := &GCTTest{}
	gctTestTwo := &GCTTest{}
	if err = randomize.Struct(seed, gctTestOne, gctTestDBTypes, false, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}
	if err = randomize.Struct(seed, gctTestTwo, gctTestDBTypes, false, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gctTestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gctTestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gctTestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func gctTestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GCTTest) error {
	*o = GCTTest{}
	return nil
}

func testGCTTestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GCTTest{}
	o := &GCTTest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gctTestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GCTTest object: %s", err)
	}

	AddGCTTestHook(boil.BeforeInsertHook, gctTestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gctTestBeforeInsertHooks = []GCTTestHook{}

	AddGCTTestHook(boil.AfterInsertHook, gctTestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gctTestAfterInsertHooks = []GCTTestHook{}

	AddGCTTestHook(boil.AfterSelectHook, gctTestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gctTestAfterSelectHooks = []GCTTestHook{}

	AddGCTTestHook(boil.BeforeUpdateHook, gctTestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gctTestBeforeUpdateHooks = []GCTTestHook{}

	AddGCTTestHook(boil.AfterUpdateHook, gctTestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gctTestAfterUpdateHooks = []GCTTestHook{}

	AddGCTTestHook(boil.BeforeDeleteHook, gctTestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gctTestBeforeDeleteHooks = []GCTTestHook{}

	AddGCTTestHook(boil.AfterDeleteHook, gctTestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gctTestAfterDeleteHooks = []GCTTestHook{}

	AddGCTTestHook(boil.BeforeUpsertHook, gctTestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gctTestBeforeUpsertHooks = []GCTTestHook{}

	AddGCTTestHook(boil.AfterUpsertHook, gctTestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gctTestAfterUpsertHooks = []GCTTestHook{}
}

func testGCTTestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGCTTestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gctTestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGCTTestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGCTTestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GCTTestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGCTTestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GCTTests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gctTestDBTypes = map[string]string{`ID`: `integer`}
	_              = bytes.MinRead
)

func testGCTTestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gctTestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gctTestAllColumns) == len(gctTestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGCTTestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gctTestAllColumns) == len(gctTestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GCTTest{}
	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gctTestDBTypes, true, gctTestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gctTestAllColumns, gctTestPrimaryKeyColumns) {
		fields = gctTestAllColumns
	} else {
		fields = strmangle.SetComplement(
			gctTestAllColumns,
			gctTestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GCTTestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGCTTestsUpsert(t *testing.T) {
	t.Parallel()

	if len(gctTestAllColumns) == len(gctTestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GCTTest{}
	if err = randomize.Struct(seed, &o, gctTestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GCTTest: %s", err)
	}

	count, err := GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gctTestDBTypes, false, gctTestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GCTTest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GCTTest: %s", err)
	}

	count, err = GCTTests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
