{{define "backtester" -}}
{{template "header" .}}
## Current Features for {{.Name}} package

#### This package collates basic broad functions that are used throughout this codebase.

- Data loading
  - OHLCV candle data from kline.Item{}
  - Ticker price data
- Strategy support
  - Will execute a OnSignal() on each tick

##### Prerequisites

#### Backtest setup

#### Creating a strategy

Creation of a strategy is simple and requires an OnSignalEvent method to be implemented

Example:
```
type Strategy struct{}

func (s *Strategy) OnSignal(d backtest.DataHandler, _ backtest.PortfolioHandler) (backtest.SignalEvent, error) {
	signal := backtest.Signal{
		Event: backtest.Event{Time: d.Latest().GetTime(),
			CurrencyPair: d.Latest().Pair()},
	}

	smaFast := indicators.SMA(d.StreamClose(), 10)
	smaSlow := indicators.SMA(d.StreamClose(), 30)

	ret := indicators.Crossover(smaFast, smaSlow)
	if ret {
		signal.SetDirection(order.Buy)
	} else {
		signal.SetDirection(order.Sell)
	}

	return &signal, nil
}

```

#### Complete Example

```
package main

type Strategy struct{}

func (s *Strategy) OnSignal(d backtest.DataHandler, _ backtest.PortfolioHandler) (backtest.SignalEvent, error) {
	signal := backtest.Signal{
		Event: backtest.Event{Time: d.Latest().GetTime(),
			CurrencyPair: d.Latest().Pair()},
	}

	smaFast := indicators.SMA(d.StreamClose(), 10)
	smaSlow := indicators.SMA(d.StreamClose(), 30)

	ret := indicators.Crossover(smaFast, smaSlow)
	if ret {
		signal.SetDirection(order.Buy)
	} else {
		signal.SetDirection(order.Sell)
	}

	return &signal, nil
}

func main() {
	bt := New()

	data := DataFromKline{}
	err := data.Load()
	if err != nil {
		log.Fatal(err)
	}

	bt.data = &data
	bt.portfolio = &Portfolio{
		initialFunds: 1000,
		riskManager:  &Risk{},
		sizeManager: &Size{
			DefaultSize:  100,
			DefaultValue: 1000,
		},
	}
        bt.strategy = &Strategy{}
	bt.exchange = &Exchange{
		MakerFee: 0.00,
		TakerFee: 0.00,
	}

	statistic := Statistic{
		strategyName: "Example",
	}
	bt.statistic = &statistic
	err = bt.Run()
	if err != nil {
	    log.Fatal(err)
	}

	bt.Reset()
}
```


### Please click GoDocs chevron above to view current GoDoc information for this package
{{template "contributions"}}
{{template "donations" .}}
{{end}}
