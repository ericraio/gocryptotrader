package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/thrasher-corp/gocryptotrader/core"
)

var (
	templatePath string
	outputFile string
	defaultPath = filepath.Join("..","templates")
	defaultOutputfile = filepath.Join("..","chart_data_gen.go")
)

var tmpl = template.Must(template.New("").Parse(`// Code Generated by chart template generation tool; DO NOT EDIT.
package charts

var (
	templateList = map[string][]byte{
		{{ printf "%q" . }}	
}
)
`))

func main() {
	fmt.Println("GoCryptoTrader: chart template generator")
	fmt.Println(core.Copyright)
	fmt.Println()

	flag.StringVar(&templatePath, "path", defaultPath, "path to load templates from")

	flag.Parse()

	templateList, err := buildFileList()
	if err != nil {
		log.Fatal(err)
	}
	if len(templateList) == 0 {
		log.Println("no template files found")
		os.Exit(1)
	}

	// var templateListOutput []byte
	// for x := range templateList {
	// 	v, err := ReadTemplate(templateList[x])
	// 	if err != nil {
	// 		log.Println(err)
	// 		continue
	// 	}
	// 	templateListOutput = append(templateListOutput, v)
	// }
	// fmt.Println(templateListOutput)
	// tmpl.Execute(os.Stdout, templateListOutput)
}

func buildFileList() ([]string, error) {
	var files []string
	err := filepath.Walk(templatePath, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() {
			files = append(files, path)
		}
		return nil
	})
	if err != nil {
		return files, err
	}
	return files, nil
}

func readTemplateToByte(input string) ([]byte, error) {
	return ioutil.ReadFile(input)
}

func ReadTemplate(input string) ([][]byte, error) {
	b, err := readTemplateToByte(input)
	if err != nil {
		return nil, err
	}

	s := make([][]byte, 0, len(b))
	// for i := range b {
	// 	s = append(s, strconv.Itoa(int(b[i])))
	// }

	// output := stripPath(input) + "\": {" + strings.Join(s, ",") + "},"
	return s, nil
}

func stripPath(in string)  string {
	return strings.TrimLeft(in, templatePath)
}